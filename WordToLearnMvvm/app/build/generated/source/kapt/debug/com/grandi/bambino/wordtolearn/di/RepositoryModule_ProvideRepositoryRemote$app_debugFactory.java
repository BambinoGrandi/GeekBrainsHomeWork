// Generated by Dagger (https://google.github.io/dagger).
package com.grandi.bambino.wordtolearn.di;

import com.grandi.bambino.wordtolearn.model.data.SearchResult;
import com.grandi.bambino.wordtolearn.model.source.IDataSource;
import com.grandi.bambino.wordtolearn.repository.IRepository;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import java.util.List;
import javax.inject.Provider;

public final class RepositoryModule_ProvideRepositoryRemote$app_debugFactory
    implements Factory<IRepository<List<SearchResult>>> {
  private final RepositoryModule module;

  private final Provider<IDataSource<List<SearchResult>>> dataSourceLocalProvider;

  private final Provider<IDataSource<List<SearchResult>>> dataSourceRemoteProvider;

  public RepositoryModule_ProvideRepositoryRemote$app_debugFactory(
      RepositoryModule module,
      Provider<IDataSource<List<SearchResult>>> dataSourceLocalProvider,
      Provider<IDataSource<List<SearchResult>>> dataSourceRemoteProvider) {
    this.module = module;
    this.dataSourceLocalProvider = dataSourceLocalProvider;
    this.dataSourceRemoteProvider = dataSourceRemoteProvider;
  }

  @Override
  public IRepository<List<SearchResult>> get() {
    return provideInstance(module, dataSourceLocalProvider, dataSourceRemoteProvider);
  }

  public static IRepository<List<SearchResult>> provideInstance(
      RepositoryModule module,
      Provider<IDataSource<List<SearchResult>>> dataSourceLocalProvider,
      Provider<IDataSource<List<SearchResult>>> dataSourceRemoteProvider) {
    return proxyProvideRepositoryRemote$app_debug(
        module, dataSourceLocalProvider.get(), dataSourceRemoteProvider.get());
  }

  public static RepositoryModule_ProvideRepositoryRemote$app_debugFactory create(
      RepositoryModule module,
      Provider<IDataSource<List<SearchResult>>> dataSourceLocalProvider,
      Provider<IDataSource<List<SearchResult>>> dataSourceRemoteProvider) {
    return new RepositoryModule_ProvideRepositoryRemote$app_debugFactory(
        module, dataSourceLocalProvider, dataSourceRemoteProvider);
  }

  public static IRepository<List<SearchResult>> proxyProvideRepositoryRemote$app_debug(
      RepositoryModule instance,
      IDataSource<List<SearchResult>> dataSourceLocal,
      IDataSource<List<SearchResult>> dataSourceRemote) {
    return Preconditions.checkNotNull(
        instance.provideRepositoryRemote$app_debug(dataSourceLocal, dataSourceRemote),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
