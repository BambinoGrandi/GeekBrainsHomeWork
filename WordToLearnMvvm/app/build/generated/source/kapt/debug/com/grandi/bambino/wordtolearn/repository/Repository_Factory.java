// Generated by Dagger (https://google.github.io/dagger).
package com.grandi.bambino.wordtolearn.repository;

import com.grandi.bambino.wordtolearn.model.data.SearchResult;
import com.grandi.bambino.wordtolearn.model.source.IDataSource;
import dagger.internal.Factory;
import java.util.List;
import javax.inject.Provider;

public final class Repository_Factory implements Factory<Repository> {
  private final Provider<IDataSource<List<SearchResult>>> localSourceProvider;

  private final Provider<IDataSource<List<SearchResult>>> remoteSourceProvider;

  public Repository_Factory(
      Provider<IDataSource<List<SearchResult>>> localSourceProvider,
      Provider<IDataSource<List<SearchResult>>> remoteSourceProvider) {
    this.localSourceProvider = localSourceProvider;
    this.remoteSourceProvider = remoteSourceProvider;
  }

  @Override
  public Repository get() {
    return provideInstance(localSourceProvider, remoteSourceProvider);
  }

  public static Repository provideInstance(
      Provider<IDataSource<List<SearchResult>>> localSourceProvider,
      Provider<IDataSource<List<SearchResult>>> remoteSourceProvider) {
    return new Repository(localSourceProvider.get(), remoteSourceProvider.get());
  }

  public static Repository_Factory create(
      Provider<IDataSource<List<SearchResult>>> localSourceProvider,
      Provider<IDataSource<List<SearchResult>>> remoteSourceProvider) {
    return new Repository_Factory(localSourceProvider, remoteSourceProvider);
  }

  public static Repository newRepository(
      IDataSource<List<SearchResult>> localSource, IDataSource<List<SearchResult>> remoteSource) {
    return new Repository(localSource, remoteSource);
  }
}
